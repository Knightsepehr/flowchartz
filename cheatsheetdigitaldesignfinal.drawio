<mxfile host="app.diagrams.net" modified="2024-01-11T11:00:15.068Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" etag="iUDzEsGKjaiogpNDQ-1U" version="22.1.18" type="github">
  <diagram name="Page-1" id="1fI7LtTeoU0zJGXn7ISi">
    <mxGraphModel dx="1714" dy="871" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-4" value="&lt;div style=&quot;line-height: 100%;&quot;&gt;-- XOR gate (ESD figure 2.3)&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;--------------------------------------&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;entity XOR_ent is&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;port( x: in std_logic;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;y: in std_logic;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;F: out std_logic&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;);&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;end XOR_ent;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;--------------------------------------&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;architecture behv1 of XOR_ent is&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;process(x, y)&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;-- compare to truth table&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;if (x/=y) then&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;F &amp;lt;= &#39;1&#39;;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;else&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;F &amp;lt;= &#39;0&#39;;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;end if;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;end process;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;end behv1;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;architecture behv2 of XOR_ent is&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;F &amp;lt;= x xor y;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;end behv2;&lt;/div&gt;&lt;div style=&quot;line-height: 100%;&quot;&gt;--------------------------------------&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;fontSize=6;fontColor=#000000;textDirection=ltr;spacing=0;fontFamily=Times New Roman;verticalAlign=top;horizontal=1;" vertex="1" parent="1">
          <mxGeometry width="90" height="230" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-5" value="&lt;div style=&quot;orphans: 2; text-align: start; text-indent: 0px; widows: 2; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word; line-height: 100%;&quot;&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;-- AND gate (ESD book figure 2.3)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;--------------------------------------------------&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;entity AND_ent is&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;port(&amp;nbsp; &amp;nbsp; x: in std_logic;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;&amp;nbsp; &amp;nbsp; y: in std_logic;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;&amp;nbsp; &amp;nbsp; F: out std_logic&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;);&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;end AND_ent;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;--------------------------------------------------&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;architecture behav1 of AND_ent is&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;process(x, y)&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;-- compare to truth table&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;if ((x=&#39;1&#39;) and (y=&#39;1&#39;)) then&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;F &amp;lt;= &#39;1&#39;;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;&amp;nbsp; &amp;nbsp; else&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;F &amp;lt;= &#39;0&#39;;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;&amp;nbsp; &amp;nbsp; end if;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;end process;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;end behav1;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;architecture behav2 of AND_ent is&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;F &amp;lt;= x and y;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;end behav2;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%;&quot;&gt;--------------------------------------------------&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;fontColor=#000000;fontSize=6;textDirection=ltr;spacing=0;fontFamily=Times New Roman;verticalAlign=top;horizontal=1;" vertex="1" parent="1">
          <mxGeometry x="90" width="110" height="230" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-7" value="&lt;div style=&quot;orphans: 2; text-align: start; text-indent: 0px; widows: 2; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word; line-height: 100%;&quot;&gt;-- VHDL code for 4:1 multiplexor&lt;br&gt;-- Multiplexor is a device to select different&lt;br&gt;-- inputs to outputs. we use 3 bits vector to &lt;br&gt;-- describe its I/O ports &lt;br&gt;-------------------------------------------------&lt;br&gt;entity Mux is&lt;br&gt;port(    I3:     in std_logic_vector(2 downto 0);&lt;br&gt;    I2:     in std_logic_vector(2 downto 0);&lt;br&gt;    I1:     in std_logic_vector(2 downto 0);&lt;br&gt;    I0:     in std_logic_vector(2 downto 0);&lt;br&gt;    S:    in std_logic_vector(1 downto 0);&lt;br&gt;    O:    out std_logic_vector(2 downto 0)&lt;br&gt;);&lt;br&gt;end Mux;  &lt;br&gt;-------------------------------------------------&lt;br&gt;&lt;br&gt;architecture behv1 of Mux is&lt;br&gt;begin&lt;br&gt;    process(I3,I2,I1,I0,S)&lt;br&gt;    begin&lt;br&gt;    &lt;br&gt;        -- use case statement&lt;br&gt;        case S is&lt;br&gt;        when &quot;00&quot; =&amp;gt;    O &amp;lt;= I0;&lt;br&gt;        when &quot;01&quot; =&amp;gt;    O &amp;lt;= I1;&lt;br&gt;        when &quot;10&quot; =&amp;gt;    O &amp;lt;= I2;&lt;br&gt;        when &quot;11&quot; =&amp;gt;    O &amp;lt;= I3;&lt;br&gt;        when others =&amp;gt;    O &amp;lt;= &quot;ZZZ&quot;;&lt;br&gt;    end case;&lt;br&gt;&lt;br&gt;    end process;&lt;br&gt;end behv1;&lt;br&gt;&lt;br&gt;architecture behv2 of Mux is&lt;br&gt;begin&lt;br&gt;&lt;br&gt;    -- use when.. else statement&lt;br&gt;    O &amp;lt;=    I0 when S=&quot;00&quot; else&lt;br&gt;        I1 when S=&quot;01&quot; else&lt;br&gt;        I2 when S=&quot;10&quot; else&lt;br&gt;        I3 when S=&quot;11&quot; else&lt;br&gt;        &quot;ZZZ&quot;;&lt;br&gt;&lt;br&gt;end behv2;&lt;br&gt;--------------------------------------------------&lt;br&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;fontSize=6;fontColor=#000000;verticalAlign=top;horizontal=1;fontFamily=Times New Roman;textDirection=ltr;" vertex="1" parent="1">
          <mxGeometry x="190" width="120" height="290" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-8" value="-- 2:4 Decoder (ESD figure 2.5)&#xa;-- decoder is a kind of inverse process&#xa;-- of multiplexor&#xa;-------------------------------------------------&#xa;entity DECODER is&#xa;port(    I:    in std_logic_vector(1 downto 0);&#xa;    O:    out std_logic_vector(3 downto 0)&#xa;);&#xa;end DECODER;&#xa;-------------------------------------------------&#xa;architecture behv of DECODER is&#xa;begin&#xa;&#xa;&#xa;    -- process statement&#xa;&#xa;&#xa;    process (I)&#xa;    begin&#xa;    &#xa;        -- use case statement &#xa;&#xa;&#xa;        case I is&#xa;        when &quot;00&quot; =&gt; O &lt;= &quot;0001&quot;;&#xa;        when &quot;01&quot; =&gt; O &lt;= &quot;0010&quot;;&#xa;        when &quot;10&quot; =&gt; O &lt;= &quot;0100&quot;;&#xa;        when &quot;11&quot; =&gt; O &lt;= &quot;1000&quot;;&#xa;        when others =&gt; O &lt;= &quot;XXXX&quot;;&#xa;    end case;&#xa;&#xa;&#xa;    end process;&#xa;    &#xa;end behv;&#xa;&#xa;&#xa;architecture when_else of DECODER is&#xa;begin&#xa;    &#xa;    -- use when..else statement&#xa;&#xa;&#xa;    O &lt;=     &quot;0001&quot; when I = &quot;00&quot; else&#xa;        &quot;0010&quot; when I = &quot;01&quot; else&#xa;        &quot;0100&quot; when I = &quot;10&quot; else&#xa;        &quot;1000&quot; when I = &quot;11&quot; else&#xa;        &quot;XXXX&quot;;&#xa;&#xa;&#xa;end when_else;&#xa;--------------------------------------------------" style="text;whiteSpace=wrap;fontSize=6;verticalAlign=top;horizontal=1;fontFamily=Times New Roman;textDirection=ltr;" vertex="1" parent="1">
          <mxGeometry x="310" width="120" height="380" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-9" value="-- VHDL code for n-bit adder (ESD figure 2.5)    &#xa;-- function of adder:A plus B to get n-bit sum and 1 bit carry    &#xa;-- we may use generic statement to set the parameter &#xa;-- n of the adder.                            &#xa;--------------------------------------------------------&#xa;library ieee;&#xa;use ieee.std_logic_1164.all;&#xa;use ieee.std_logic_arith.all;&#xa;use ieee.std_logic_unsigned.all;&#xa;--------------------------------------------------------&#xa;entity ADDER is&#xa;generic(n: natural :=2);&#xa;port(    A:    in std_logic_vector(n-1 downto 0);&#xa;    B:    in std_logic_vector(n-1 downto 0);&#xa;    carry:    out std_logic;&#xa;    sum:    out std_logic_vector(n-1 downto 0)&#xa;);&#xa;&#xa;&#xa;end ADDER;&#xa;--------------------------------------------------------&#xa;architecture behv of ADDER is&#xa;-- define a temparary signal to store the result&#xa;signal result: std_logic_vector(n downto 0);&#xa;begin                      &#xa;    -- the 3rd bit should be carry&#xa;   &#xa;    result &lt;= (&#39;0&#39; &amp; A)+(&#39;0&#39; &amp; B);&#xa;    sum &lt;= result(n-1 downto 0);&#xa;    carry &lt;= result(n);&#xa;&#xa;&#xa;end behv;&#xa;--------------------------------------------------------" style="text;whiteSpace=wrap;fontSize=6;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry y="190" width="180" height="250" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
