<mxfile host="app.diagrams.net" modified="2024-01-11T11:44:07.486Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" etag="TWSbYrBghkAfmqF80ZCj" version="22.1.18" type="github">
  <diagram name="Page-1" id="1fI7LtTeoU0zJGXn7ISi">
    <mxGraphModel dx="819" dy="426" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" background="none" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-4" value="&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;-- XOR gate (ESD figure 2.3)&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;--------------------------------------&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;entity XOR_ent is&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;port( x: in std_logic;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;y: in std_logic;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;F: out std_logic&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;);&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;end XOR_ent;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;--------------------------------------&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;architecture behv1 of XOR_ent is&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;process(x, y)&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;-- compare to truth table&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;if (x/=y) then&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;F &amp;lt;= &#39;1&#39;;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;else&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;F &amp;lt;= &#39;0&#39;;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;end if;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;end process;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;end behv1;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;architecture behv2 of XOR_ent is&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;F &amp;lt;= x xor y;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;end behv2;&lt;/div&gt;&lt;div style=&quot;line-height: 100%; font-size: 6px;&quot;&gt;--------------------------------------&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;fontSize=6;fontColor=#000000;textDirection=ltr;spacing=0;fontFamily=Times New Roman;verticalAlign=top;horizontal=1;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="270" y="280" width="90" height="190" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-5" value="&lt;div style=&quot;orphans: 2; text-align: start; text-indent: 0px; widows: 2; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;-- AND gate (ESD book figure 2.3)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;--------------------------------------------------&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;entity AND_ent is&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;port(&amp;nbsp; &amp;nbsp; x: in std_logic;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&amp;nbsp; &amp;nbsp; y: in std_logic;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&amp;nbsp; &amp;nbsp; F: out std_logic&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;);&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;end AND_ent;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;--------------------------------------------------&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;architecture behav1 of AND_ent is&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;process(x, y)&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;-- compare to truth table&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;if ((x=&#39;1&#39;) and (y=&#39;1&#39;)) then&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;F &amp;lt;= &#39;1&#39;;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&amp;nbsp; &amp;nbsp; else&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;F &amp;lt;= &#39;0&#39;;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&amp;nbsp; &amp;nbsp; end if;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;end process;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;end behav1;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;architecture behav2 of AND_ent is&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;begin&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;F &amp;lt;= x and y;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;end behav2;&lt;/div&gt;&lt;div style=&quot;overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;--------------------------------------------------&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;fontColor=#000000;fontSize=6;textDirection=ltr;spacing=0;fontFamily=Times New Roman;verticalAlign=top;horizontal=1;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="480" y="280" width="110" height="190" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-7" value="&lt;div style=&quot;orphans: 2; text-align: start; text-indent: 0px; widows: 2; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; overflow-wrap: break-word; line-height: 100%; font-size: 6px;&quot;&gt;-- VHDL code for 4:1 multiplexor&lt;br style=&quot;font-size: 6px;&quot;&gt;-- Multiplexor is a device to select different&lt;br style=&quot;font-size: 6px;&quot;&gt;-- inputs to outputs. we use 3 bits vector to &lt;br style=&quot;font-size: 6px;&quot;&gt;-- describe its I/O ports &lt;br style=&quot;font-size: 6px;&quot;&gt;-------------------------------------------------&lt;br style=&quot;font-size: 6px;&quot;&gt;entity Mux is&lt;br style=&quot;font-size: 6px;&quot;&gt;port(    I3:     in std_logic_vector(2 downto 0);&lt;br style=&quot;font-size: 6px;&quot;&gt;    I2:     in std_logic_vector(2 downto 0);&lt;br style=&quot;font-size: 6px;&quot;&gt;    I1:     in std_logic_vector(2 downto 0);&lt;br style=&quot;font-size: 6px;&quot;&gt;    I0:     in std_logic_vector(2 downto 0);&lt;br style=&quot;font-size: 6px;&quot;&gt;    S:    in std_logic_vector(1 downto 0);&lt;br style=&quot;font-size: 6px;&quot;&gt;    O:    out std_logic_vector(2 downto 0)&lt;br style=&quot;font-size: 6px;&quot;&gt;);&lt;br style=&quot;font-size: 6px;&quot;&gt;end Mux;  &lt;br style=&quot;font-size: 6px;&quot;&gt;-------------------------------------------------&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;architecture behv1 of Mux is&lt;br style=&quot;font-size: 6px;&quot;&gt;begin&lt;br style=&quot;font-size: 6px;&quot;&gt;    process(I3,I2,I1,I0,S)&lt;br style=&quot;font-size: 6px;&quot;&gt;    begin&lt;br style=&quot;font-size: 6px;&quot;&gt;    &lt;br style=&quot;font-size: 6px;&quot;&gt;        -- use case statement&lt;br style=&quot;font-size: 6px;&quot;&gt;        case S is&lt;br style=&quot;font-size: 6px;&quot;&gt;        when &quot;00&quot; =&amp;gt;    O &amp;lt;= I0;&lt;br style=&quot;font-size: 6px;&quot;&gt;        when &quot;01&quot; =&amp;gt;    O &amp;lt;= I1;&lt;br style=&quot;font-size: 6px;&quot;&gt;        when &quot;10&quot; =&amp;gt;    O &amp;lt;= I2;&lt;br style=&quot;font-size: 6px;&quot;&gt;        when &quot;11&quot; =&amp;gt;    O &amp;lt;= I3;&lt;br style=&quot;font-size: 6px;&quot;&gt;        when others =&amp;gt;    O &amp;lt;= &quot;ZZZ&quot;;&lt;br style=&quot;font-size: 6px;&quot;&gt;    end case;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;    end process;&lt;br style=&quot;font-size: 6px;&quot;&gt;end behv1;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;architecture behv2 of Mux is&lt;br style=&quot;font-size: 6px;&quot;&gt;begin&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;    -- use when.. else statement&lt;br style=&quot;font-size: 6px;&quot;&gt;    O &amp;lt;=    I0 when S=&quot;00&quot; else&lt;br style=&quot;font-size: 6px;&quot;&gt;        I1 when S=&quot;01&quot; else&lt;br style=&quot;font-size: 6px;&quot;&gt;        I2 when S=&quot;10&quot; else&lt;br style=&quot;font-size: 6px;&quot;&gt;        I3 when S=&quot;11&quot; else&lt;br style=&quot;font-size: 6px;&quot;&gt;        &quot;ZZZ&quot;;&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;br style=&quot;font-size: 6px;&quot;&gt;end behv2;&lt;br style=&quot;font-size: 6px;&quot;&gt;--------------------------------------------------&lt;br style=&quot;font-size: 6px;&quot;&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;fontSize=6;fontColor=#000000;verticalAlign=top;horizontal=1;fontFamily=Times New Roman;textDirection=ltr;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry width="120" height="280" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-8" value="-- 2:4 Decoder (ESD figure 2.5)&#xa;-- decoder is a kind of inverse process&#xa;-- of multiplexor&#xa;-------------------------------------------------&#xa;entity DECODER is&#xa;port(    I:    in std_logic_vector(1 downto 0);&#xa;    O:    out std_logic_vector(3 downto 0)&#xa;);&#xa;end DECODER;&#xa;-------------------------------------------------&#xa;architecture behv of DECODER is&#xa;begin&#xa;    -- process statement&#xa;    process (I)&#xa;    begin&#xa;        -- use case statement &#xa;        case I is&#xa;        when &quot;00&quot; =&gt; O &lt;= &quot;0001&quot;;&#xa;        when &quot;01&quot; =&gt; O &lt;= &quot;0010&quot;;&#xa;        when &quot;10&quot; =&gt; O &lt;= &quot;0100&quot;;&#xa;        when &quot;11&quot; =&gt; O &lt;= &quot;1000&quot;;&#xa;        when others =&gt; O &lt;= &quot;XXXX&quot;;&#xa;    end case;&#xa;    end process;&#xa;end behv;&#xa;architecture when_else of DECODER is&#xa;begin&#xa;    -- use when..else statement&#xa;&#xa;    O &lt;=     &quot;0001&quot; when I = &quot;00&quot; else&#xa;        &quot;0010&quot; when I = &quot;01&quot; else&#xa;        &quot;0100&quot; when I = &quot;10&quot; else&#xa;        &quot;1000&quot; when I = &quot;11&quot; else&#xa;        &quot;XXXX&quot;;&#xa;&#xa;&#xa;end when_else;&#xa;--------------------------------------------------" style="text;whiteSpace=wrap;fontSize=6;verticalAlign=top;horizontal=1;fontFamily=Times New Roman;textDirection=ltr;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="240" width="120" height="280" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-9" value="-- VHDL code for n-bit adder (ESD figure 2.5)    &#xa;-- function of adder:A plus B to get n-bit sum &#xa;-- and 1 bit carry    &#xa;-- we may use generic statement to &#xa;-- set the parameter &#xa;-- n of the adder.                            &#xa;--------------------------------------------------------&#xa;library ieee;&#xa;use ieee.std_logic_1164.all;&#xa;use ieee.std_logic_arith.all;&#xa;use ieee.std_logic_unsigned.all;&#xa;--------------------------------------------------------&#xa;entity ADDER is&#xa;generic(n: natural :=2);&#xa;port(    A:    in std_logic_vector(n-1 downto 0);&#xa;    B:    in std_logic_vector(n-1 downto 0);&#xa;    carry:    out std_logic;&#xa;    sum:    out std_logic_vector(n-1 downto 0)&#xa;);&#xa;end ADDER;&#xa;--------------------------------------------------------&#xa;architecture behv of ADDER is&#xa;-- define a temparary signal to store the result&#xa;signal result: std_logic_vector(n downto 0);&#xa;begin                      &#xa;    -- the 3rd bit should be carry&#xa;   &#xa;    result &lt;= (&#39;0&#39; &amp; A)+(&#39;0&#39; &amp; B);&#xa;    sum &lt;= result(n-1 downto 0);&#xa;    carry &lt;= result(n);&#xa;end behv;&#xa;" style="text;whiteSpace=wrap;fontSize=6;fontFamily=Times New Roman;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry y="280" width="130" height="230" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-10" value="-- n-bit Comparator (ESD book figure 2.5)&#xa;-- this simple comparator has two n-bit inputs &amp; &#xa;-- three 1-bit outputs&#xa;--------------------------------------------------&#xa;entity Comparator is&#xa;generic(n: natural :=2);&#xa;port(    A:    in std_logic_vector(n-1 downto 0);&#xa;    B:    in std_logic_vector(n-1 downto 0);&#xa;    less:        out std_logic;&#xa;    equal:        out std_logic;&#xa;    greater:    out std_logic&#xa;);&#xa;end Comparator;&#xa;---------------------------------------------------&#xa;architecture behv of Comparator is&#xa;begin &#xa;    process(A,B)&#xa;    begin&#xa;        if (A&lt;B) then &#xa;        less &lt;= &#39;1&#39;;&#xa;        equal &lt;= &#39;0&#39;;&#xa;        greater &lt;= &#39;0&#39;;&#xa;    elsif (A=B) then   &#xa;        less &lt;= &#39;0&#39;;&#xa;        equal &lt;= &#39;1&#39;;&#xa;        greater &lt;= &#39;0&#39;;&#xa;    else &#xa;        less &lt;= &#39;0&#39;;&#xa;        equal &lt;= &#39;0&#39;;&#xa;        greater &lt;= &#39;1&#39;;&#xa;    end if;&#xa;    end process;&#xa;end behv;" style="text;whiteSpace=wrap;strokeColor=default;fontSize=6;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="120" width="120" height="280" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-12" value="-- Simple ALU Module (ESD book Figure 2.5)        &#xa;-- ALU stands for arithmatic logic unit.&#xa;-- It perform multiple operations according to &#xa;-- the control bits.&#xa;-- we use 2&#39;s complement subraction in this example&#xa;-- two 2-bit inputs &amp; carry-bit ignored&#xa;---------------------------------------------------&#xa;--same libraries as the n-bit adder&#xa;---------------------------------------------------&#xa;entity ALU is&#xa;port(    A:    in std_logic_vector(1 downto 0);&#xa;    B:    in std_logic_vector(1 downto 0);&#xa;    Sel:    in std_logic_vector(1 downto 0);&#xa;    Res:    out std_logic_vector(1 downto 0)  &#xa;);&#xa;end ALU;&#xa;---------------------------------------------------&#xa;architecture behv of ALU is&#xa;begin                       &#xa;    process(A,B,Sel)&#xa;    begin&#xa;    -- use case statement to achieve &#xa;    -- different operations of ALU&#xa;    case Sel is&#xa;        when &quot;00&quot; =&gt;&#xa;        Res &lt;= A + B;&#xa;        when &quot;01&quot; =&gt;                        &#xa;            Res &lt;= A + (not B) + 1;&#xa;            when &quot;10&quot; =&gt;&#xa;        Res &lt;= A and B;&#xa;        when &quot;11&quot; =&gt;     &#xa;        Res &lt;= A or B;&#xa;        when others =&gt;     &#xa;        Res &lt;= &quot;XX&quot;;&#xa;        end case;&#xa;    end process;&#xa;end behv;" style="text;whiteSpace=wrap;fontSize=6;fontFamily=Times New Roman;strokeColor=default;strokeWidth=1;" vertex="1" parent="1">
          <mxGeometry x="360" width="140" height="280" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-13" value="" style="endArrow=none;html=1;rounded=0;entryX=0;entryY=1;entryDx=0;entryDy=0;exitX=1;exitY=0;exitDx=0;exitDy=0;fontSize=6;fontFamily=Times New Roman;" edge="1" parent="1" source="CzFrGwOpRJIVh9ln8tWY-9" target="CzFrGwOpRJIVh9ln8tWY-7">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="140" y="300" as="sourcePoint" />
            <mxPoint x="190" y="250" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-14" value="-- Example of doing multiplication showing&#xa;-- (1) how to use variable with in process&#xa;-- (2) how to use for loop statement&#xa;-- (3) algorithm of multiplication&#xa;--------------------------------------------------------&#xa;--same libraries as the n bit adder&#xa;--------------------------------------------------------&#xa;-- two 4-bit inputs and one 8-bit outputs&#xa;entity multiplier is&#xa;port(    num1, num2:    in std_logic_vector(1 downto 0);&#xa;    product:     out std_logic_vector(3 downto 0)&#xa;);&#xa;end multiplier;&#xa;&#xa;architecture behv of multiplier is&#xa;&#xa;begin&#xa;process(num1, num2)&#xa;  variable num1_reg: std_logic_vector(2 downto 0);&#xa;  variable product_reg: std_logic_vector(5 downto 0);&#xa;begin     &#xa;  num1_reg := &#39;0&#39; &amp; num1;&#xa;  product_reg := &quot;0000&quot; &amp; num2;&#xa;  -- use variables doing computation&#xa;  -- algorithm is to repeat shifting/adding&#xa;  for i in 1 to 3 loop&#xa;    if product_reg(0)=&#39;1&#39; then&#xa;      product_reg(5 downto 3) := product_reg(5 downto 3) &#xa;      + num1_reg(2 downto 0);&#xa;    end if;&#xa;    product_reg(5 downto 0) := &#39;0&#39; &amp; product_reg(5 downto 1);&#xa;  end loop;&#xa;  -- assign the result of computation back to output signal&#xa;  product &lt;= product_reg(3 downto 0);&#xa;end process;&#xa;end behv;" style="text;whiteSpace=wrap;fontSize=6;fontFamily=Times New Roman;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="500" width="160" height="280" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-15" value="-- Simple D Latch (ESD book Chapter 2.3.1)&#xa;-- latch is simply controlled by enable bit&#xa;-- but has nothing to do with clock sigal&#xa;-- notice this difference from flip-flops&#xa;--------------------------------------------&#xa;entity D_latch is&#xa;port(    data_in:    in std_logic;&#xa;    enable:        in std_logic;&#xa;    data_out:    out std_logic&#xa;);&#xa;end D_latch;&#xa;--------------------------------------------&#xa;architecture behv of D_latch is&#xa;begin        &#xa;    -- compare this to D flipflop&#xa;    process(data_in, enable)&#xa;    begin&#xa;        if (enable=&#39;1&#39;) then&#xa;            -- no clock signal here&#xa;        data_out &lt;= data_in;  &#xa;    end if;&#xa;    end process;    &#xa;    &#xa;end behv;" style="text;whiteSpace=wrap;strokeColor=default;fontSize=6;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="360" y="280" width="120" height="190" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-18" value="-- D Flip-Flop (ESD book Chapter 2.3.1)&#xa;-- Flip-flop is the basic component in &#xa;-- sequential logic design&#xa;-- we assign input signal to the output &#xa;-- at the clock rising edge &#xa;---------------------------------------------&#xa;library ieee ;&#xa;use ieee.std_logic_1164.all;&#xa;use work.all;&#xa;---------------------------------------------&#xa;entity dff is&#xa;port(    data_in:    in std_logic;&#xa;    clock:        in std_logic;&#xa;    data_out:    out std_logic&#xa;);&#xa;end dff;&#xa;----------------------------------------------&#xa;architecture behv of dff is&#xa;begin&#xa;&#xa;&#xa;    process(data_in, clock)&#xa;    begin&#xa;&#xa;&#xa;        -- clock rising edge&#xa;&#xa;&#xa;    if (clock=&#39;1&#39; and clock&#39;event) then&#xa;        data_out &lt;= data_in;&#xa;    end if;&#xa;&#xa;&#xa;    end process;    &#xa;&#xa;&#xa;end behv;" style="text;whiteSpace=wrap;strokeColor=default;fontSize=6;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="660" width="110" height="280" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-19" value="----------------------------------------------&#xa;-- JK Flip-Flop with reset &#xa;-- the description of JK Flip-Flop is based &#xa;-- on functional truth table&#xa;-- concurrent statement and signal assignment&#xa;-- are using in this example &#xa;----------------------------------------------&#xa;entity JK_FF is&#xa;port (    clock:        in std_logic;&#xa;    J, K:        in std_logic;&#xa;    reset:        in std_logic;&#xa;    Q, Qbar:    out std_logic&#xa;);&#xa;end JK_FF;&#xa;----------------------------------------------&#xa;architecture behv of JK_FF is&#xa;    -- define the useful signals here&#xa;    signal state: std_logic;&#xa;    signal input: std_logic_vector(1 downto 0);&#xa;begin&#xa;    -- combine inputs into vector&#xa;    input &lt;= J &amp; K;        &#xa;    p: process(clock, reset) is&#xa;    begin&#xa;    &#xa;    if (reset=&#39;1&#39;) then&#xa;        state &lt;= &#39;0&#39;;&#xa;    elsif (rising_edge(clock)) then&#xa;            -- compare to the truth table&#xa;        case (input) is&#xa;        when &quot;11&quot; =&gt;&#xa;            state &lt;= not state;&#xa;        when &quot;10&quot; =&gt;&#xa;            state &lt;= &#39;1&#39;;&#xa;        when &quot;01&quot; =&gt;&#xa;            state &lt;= &#39;0&#39;;&#xa;        when others =&gt;&#xa;            null;&#xa;        end case;&#xa;    end if;&#xa;    end process;&#xa;    &#xa;    -- concurrent statements&#xa;    Q &lt;= state;&#xa;    Qbar &lt;= not state;&#xa;end behv;" style="text;whiteSpace=wrap;fontFamily=Times New Roman;fontSize=6;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry y="510" width="160" height="340" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-20" value="-- n-bit Register (ESD book figure 2.6)&#xa;-- KEY WORD: concurrent, generic and range&#xa;---------------------------------------------------&#xa;library ieee ;&#xa;use ieee.std_logic_1164.all;&#xa;use ieee.std_logic_unsigned.all;&#xa;---------------------------------------------------&#xa;entity reg is&#xa;generic(n: natural :=2);&#xa;port(    I:    in std_logic_vector(n-1 downto 0);&#xa;    clock:    in std_logic;&#xa;    load:    in std_logic;&#xa;    clear:    in std_logic;&#xa;    Q:    out std_logic_vector(n-1 downto 0)&#xa;);&#xa;end reg;&#xa;----------------------------------------------------&#xa;architecture behv of reg is&#xa;&#xa;&#xa;    signal Q_tmp: std_logic_vector(n-1 downto 0);&#xa;begin&#xa;&#xa;&#xa;    process(I, clock, load, clear)&#xa;    begin&#xa;&#xa;&#xa;    if clear = &#39;0&#39; then&#xa;            -- use &#39;range in signal assigment &#xa;            Q_tmp &lt;= (Q_tmp&#39;range =&gt; &#39;0&#39;);&#xa;    elsif (clock=&#39;1&#39; and clock&#39;event) then&#xa;        if load = &#39;1&#39; then&#xa;        Q_tmp &lt;= I;&#xa;        end if;&#xa;    end if;&#xa;&#xa;&#xa;    end process;&#xa;&#xa;&#xa;    -- concurrent statement&#xa;    Q &lt;= Q_tmp;&#xa;&#xa;&#xa;end behv;" style="text;whiteSpace=wrap;strokeColor=default;fontSize=6;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="160" y="510" width="130" height="340" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-21" value="-- 3-bit Shift-Register/Shifter&#xa;-- reset is ignored according to the figure&#xa;---------------------------------------------------&#xa;entity shift_reg is&#xa;port(    I:        in std_logic;&#xa;    clock:        in std_logic;&#xa;    shift:        in std_logic;&#xa;    Q:        out std_logic&#xa;);&#xa;end shift_reg;&#xa;---------------------------------------------------&#xa;architecture behv of shift_reg is&#xa;    -- initialize the declared signal&#xa;    signal S: std_logic_vector(2 downto 0):=&quot;111&quot;;&#xa;begin  &#xa;    process(I, clock, shift, S)&#xa;    begin&#xa;    -- everything happens upon the clock changing&#xa;    if clock&#39;event and clock=&#39;1&#39; then&#xa;        if shift = &#39;1&#39; then&#xa;        S &lt;= I &amp; S(2 downto 1);&#xa;        end if;&#xa;    end if;&#xa;    end process;&#xa;    -- concurrent assignment&#xa;    Q &lt;= S(0);&#xa;end behv;" style="text;whiteSpace=wrap;fontSize=6;fontFamily=Times New Roman;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="130" y="280" width="140" height="200" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-22" value="-- VHDL code for n-bit counter (ESD figure 2.6)&#xa;-- this is the behavior description of n-bit counter&#xa;-- another way can be used is FSM model. &#xa;---------------------------------------------------&#xa;library ieee ;&#xa;use ieee.std_logic_1164.all;&#xa;use ieee.std_logic_unsigned.all;&#xa;----------------------------------------------------&#xa;entity counter is&#xa;generic(n: natural :=2);&#xa;port(    clock:    in std_logic;&#xa;    clear:    in std_logic;&#xa;    count:    in std_logic;&#xa;    Q:    out std_logic_vector(n-1 downto 0)&#xa;);&#xa;end counter;&#xa;----------------------------------------------------&#xa;architecture behv of counter is               &#xa;    signal Pre_Q: std_logic_vector(n-1 downto 0);&#xa;begin&#xa;    -- behavior describe the counter&#xa;&#xa;&#xa;    process(clock, count, clear)&#xa;    begin&#xa;    if clear = &#39;1&#39; then&#xa;         Pre_Q &lt;= Pre_Q - Pre_Q;&#xa;    elsif (clock=&#39;1&#39; and clock&#39;event) then&#xa;        if count = &#39;1&#39; then&#xa;        Pre_Q &lt;= Pre_Q + 1;&#xa;        end if;&#xa;    end if;&#xa;    end process;    &#xa;    &#xa;    -- concurrent assignment statement&#xa;    Q &lt;= Pre_Q;&#xa;end behv;" style="text;whiteSpace=wrap;strokeColor=default;fontSize=6;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="290" y="510" width="140" height="280" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-25" value="if no library mentioned its library ieee ;&#xa;use ieee.std_logic_1164.all;" style="text;whiteSpace=wrap;fontSize=6;fontFamily=Times New Roman;textDirection=ltr;labelBorderColor=none;horizontal=1;spacing=0;spacingTop=-3;spacingBottom=0;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="130" y="480" width="140" height="30" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-26" value="-- a simple 4*4 RAM module (ESD book Chapter 5) &#xa;-- KEYWORD: array, concurrent processes, generic, conv_integer &#xa;--------------------------------------------------------------&#xa;library ieee;&#xa;use ieee.std_logic_1164.all;&#xa;use ieee.std_logic_arith.all;&#xa;use ieee.std_logic_unsigned.all;&#xa;--------------------------------------------------------------&#xa;entity SRAM is&#xa;generic(    width:    integer:=4;&#xa;        depth:    integer:=4;&#xa;        addr:    integer:=2);&#xa;port(    Clock:        in std_logic;    &#xa;    Enable:        in std_logic;&#xa;    Read:        in std_logic;&#xa;    Write:        in std_logic;&#xa;    Read_Addr:    in std_logic_vector(addr-1 downto 0);&#xa;    Write_Addr:     in std_logic_vector(addr-1 downto 0); &#xa;    Data_in:     in std_logic_vector(width-1 downto 0);&#xa;    Data_out:     out std_logic_vector(width-1 downto 0)&#xa;);&#xa;end SRAM;&#xa;--------------------------------------------------------------&#xa;architecture behav of SRAM is&#xa;-- use array to define the bunch of internal temparary signals&#xa;type ram_type is array (0 to depth-1) of &#xa;    std_logic_vector(width-1 downto 0);&#xa;signal tmp_ram: ram_type;&#xa;begin               &#xa;    -- Read Functional Section&#xa;    process(Clock, Read)&#xa;    begin&#xa;    if (Clock&#39;event and Clock=&#39;1&#39;) then&#xa;        if Enable=&#39;1&#39; then&#xa;        if Read=&#39;1&#39; then&#xa;            -- buildin function conv_integer change the type&#xa;            -- from std_logic_vector to integer&#xa;            Data_out &lt;= tmp_ram(conv_integer(Read_Addr)); &#xa;        else&#xa;            Data_out &lt;= (Data_out&#39;range =&gt; &#39;Z&#39;);&#xa;        end if;&#xa;        end if;&#xa;    end if;&#xa;    end process;&#xa;     -- Write Functional Section&#xa;    process(Clock, Write)&#xa;    begin&#xa;    if (Clock&#39;event and Clock=&#39;1&#39;) then&#xa;        if Enable=&#39;1&#39; then&#xa;        if Write=&#39;1&#39; then&#xa;            tmp_ram(conv_integer(Write_Addr)) &lt;= Data_in;&#xa;        end if;&#xa;        end if;&#xa;    end if;&#xa;    end process;&#xa;end behav;" style="text;whiteSpace=wrap;strokeColor=default;fontSize=6;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="430" y="510" width="180" height="420" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-27" value="-- 32*8 ROM module (ESD Book Chapter 5)&#xa;-- ROM model has predefined content for read only purpose&#xa;--------------------------------------------------------------&#xa;--libraries same as n bit adder&#xa;entity ROM is&#xa;port(    Clock   : in std_logic;&#xa;    Reset    : in std_logic;    &#xa;    Enable    : in std_logic;&#xa;    Read    : in std_logic;&#xa;    Address    : in std_logic_vector(4 downto 0);&#xa;    Data_out: out std_logic_vector(7 downto 0)&#xa;);&#xa;end ROM;&#xa;--------------------------------------------------------------&#xa;architecture Behav of ROM is&#xa;    type ROM_Array is array (0 to 31) &#xa;    of std_logic_vector(7 downto 0);&#xa;&#xa;&#xa;    constant Content: ROM_Array := (&#xa;        0 =&gt; &quot;00000001&quot;,        -- Suppose ROM has &#xa;        1 =&gt; &quot;00000010&quot;,        -- prestored value&#xa;        2 =&gt; &quot;00000011&quot;,        -- like this table&#xa;        3 =&gt; &quot;00000100&quot;,               --&#xa;        4 =&gt; &quot;00000101&quot;,        --&#xa;        5 =&gt; &quot;00000110&quot;,               --&#xa;        6 =&gt; &quot;00000111&quot;,        --&#xa;        7 =&gt; &quot;00001000&quot;,               --&#xa;        8 =&gt; &quot;00001001&quot;,               --&#xa;        9 =&gt; &quot;00001010&quot;,               --&#xa;        10 =&gt; &quot;00001011&quot;,        --&#xa;    11 =&gt; &quot;00001100&quot;,           --&#xa;        12 =&gt; &quot;00001101&quot;,              --&#xa;        13 =&gt; &quot;00001110&quot;,        --&#xa;    14 =&gt; &quot;00001111&quot;,        --&#xa;    OTHERS =&gt; &quot;11111111&quot;        --&#xa;    );       &#xa;begin&#xa;    process(Clock, Reset, Read, Address)&#xa;    begin&#xa;        if( Reset = &#39;1&#39; ) then&#xa;        Data_out &lt;= &quot;ZZZZZZZZ&quot;;&#xa;        elsif( Clock&#39;event and Clock = &#39;1&#39; ) then&#xa;        if Enable = &#39;1&#39; then&#xa;        if( Read = &#39;1&#39; ) then&#xa;            Data_out &lt;= Content(conv_integer(Address));&#xa;                else&#xa;                    Data_out &lt;= &quot;ZZZZZZZZ&quot;;&#xa;                end if;&#xa;        end if;&#xa;        end if;&#xa;    end process;&#xa;end Behav;" style="text;whiteSpace=wrap;fontFamily=Times New Roman;fontSize=6;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="610" y="510" width="160" height="390" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-28" value="Identifier May contain A-Z, a-z, 0-9, _&#xa; ,Must start with letter May not end with _ &#xa;,May not include two consecutive _&#xa;,VHDL is case insensitive" style="text;whiteSpace=wrap;strokeColor=default;fontSize=6;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="270" y="470" width="120" height="40" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-29" value="Predefined &#xa;Bit&#xa;,Integer&#xa;,Real&#xa;,Boolean,&#xa;STD_LOGIC&#xa;user-defined" style="text;whiteSpace=wrap;fontSize=6;fontFamily=Times New Roman;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="770" width="35" height="65" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-30" value="Bit versus STD_LOGIC,BIT type can only have a value of ‘0’ or ‘1’,STD_LOGIC can have eight values,‘U’, ‘0’,’1’,’X’,’Z’,’W’,’L’,’H’,’-’,Useful mainly for simulation &#xa;‘0’,’1’, and ‘Z’ are synthesizable (your codes should contain only these three values)" style="text;whiteSpace=wrap;strokeColor=default;fontSize=6;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="390" y="470" width="220" height="40" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-31" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=default;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:image/png,;" vertex="1" parent="1">
          <mxGeometry x="590" y="280" width="126.7" height="110" as="geometry" />
        </mxCell>
        <mxCell id="CzFrGwOpRJIVh9ln8tWY-32" value="STD_LOGIC Type Demystified" style="text;whiteSpace=wrap;fontSize=6;fontFamily=Times New Roman;fontColor=#000000;spacingTop=-6;" vertex="1" parent="1">
          <mxGeometry x="626.7" y="360" width="90" height="10" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
